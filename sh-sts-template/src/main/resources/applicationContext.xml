<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd
                     http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
    <!-- 开启annotation注解 -->
    <context:annotation-config/>
    <!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入 . 逗号分隔多个包 -->   
    <context:component-scan base-package="com.icitic.avp.bean.hbm.pojo,com.kigo.tmplate.frm.hbm.dao,com.kigo.tmplate.frm.common.service">
        <context:exclude-filter type="regex" expression="com\.kigo\.tmplate\.frm\.common\.util.*"/>
    </context:component-scan>
    
    
    <!-- 指定属性配置文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- 
        <property name="locations" value="classpath:driver.properties"/>
        -->
        <property name="locations" value="classpath:hibernate.properties"/>
  </bean>
  
    <!-- 国际化的消息资源文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:msgI18n</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
  
  <!-- JNDI 方式DATASOURCE -->
  <beans>
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/IC_DATASOURCE"/>
  </beans>
  
  <!--
  <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
     <property name="driverClassName" value="${driverClassName}"/>
     <property name="url" value="${url}"/>
     <property name="username" value="${user}"/>
     <property name="password" value="${password}"/>
  </bean>
  -->
  

  <!--SessionFactory Description --> 
  <!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean"   autowire="autodetect"> -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
     <property name="dataSource" ref="dataSource" />
     <property name="packagesToScan">
        <list>
          <value>com.icitic.avp.bean.hbm.pojo</value>        
        </list>
     </property>
     <property name="hibernateProperties">
        <props>
            <prop key="hibernate.dialect">${hibernate.dialect}</prop>
            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
            <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
            <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
            <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
            <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>

            <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
            <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
            <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
            <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
            <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
        </props>
     </property>
  </bean>
  
  <!--HinerbateTemplate Description -->
  <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>
  
  
  
  <!--Transaction Description -->
  <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
     <property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>
	
	<!-- 开启注解事务 只对当前配置文件有效 -->
	<tx:annotation-driven transaction-manager="txManager"/>


    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.kigo.tmplate..service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
  
  
  
  <!-- 应用 Bean 配置 - Biz bean or DAO bean-->
  <bean id="genericBaseHibernateDAO" class="com.kigo.tmplate.frm.hbm.dao.impl.GenericBaseHibernateDAO">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>
  
  <bean id="beanDaoImpl" class="com.icitic.avp.bean.hbm.pojo.dao.IcSysParaDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>
  <bean id="beanDaoHibernateTmplateImpl" class="com.icitic.avp.bean.hbm.pojo.dao.IcSysParaDaoHibernateTmplateImpl">
    <property name="hibernateTemplate" ref="hibernateTemplate"></property>
  </bean>
  
  <bean id="beanDaoHibernateDaoSupportImpl" class="com.icitic.avp.bean.hbm.pojo.dao.IcSysParaDaoHibernateDaoSupportImpl">
   	<property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  
  
</beans>