<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd
                     http://www.springframework.org/schema/aop
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
    <!-- 开启annotation注解 -->
    <context:annotation-config/>
    <!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入 . 逗号分隔多个包 -->   
    <context:component-scan base-package="com.icitic.avp.bean.hbm.pojo,com.kigo.tmplate.frm.hbm.dao,com.kigo.tmplate.frm.common.service">
        <context:exclude-filter type="regex" expression="com\.kigo\.tmplate\.frm\.common\.util.*"/>
    </context:component-scan>
    
    <!-- 指定属性配置文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- 
        <property name="locations" value="classpath:driver.properties"/>
        -->
        <property name="locations" value="classpath:hibernate.properties"/>
  </bean>
  
  
  <!-- JNDI 方式DATASOURCE -->
  <!-- 
  <beans>
	<jee:jndi-lookup id="myDataSource" jndi-name="java:comp/env/jdbc/myds"/>
  </beans>
  -->
  

  <!--
  <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
     <property name="driverClassName" value="${driverClassName}"/>
     <property name="url" value="${url}"/>
     <property name="username" value="${user}"/>
     <property name="password" value="${password}"/>
  </bean>
  -->
  
  <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${driverClassName}" />
		<!-- 相应驱动的jdbcUrl -->
		<property name="jdbcUrl" value="${url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${user}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${password}" />

		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<!--	<property name="idleConnectionTestPeriod" value="${aliLibrary.db.idleConnectionTestPeriod}" />  -->
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<!--	<property name="idleMaxAge" value="${aliLibrary.db.idleMaxAge}" />	 -->
		<!-- 每个分区最大的连接数 -->
		<!--	<property name="maxConnectionsPerPartition" value="${aliLibrary.db.maxConnectionsPerPartition}" />	 -->
		<!-- 每个分区最小的连接数 -->
		<!--	<property name="minConnectionsPerPartition" value="${aliLibrary.db.minConnectionsPerPartition}" />	 -->
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->
		<!--	<property name="partitionCount" value="${aliLibrary.db.partitionCount}" />	 -->
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<!--	<property name="acquireIncrement" value="${aliLibrary.db.acquireIncrement}" />	 -->
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<!--	<property name="statementsCacheSize" value="${aliLibrary.db.statementsCacheSize}" />	 -->
		<!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<!--	<property name="releaseHelperThreads" value="${aliLibrary.db.releaseHelperThreads}" />	 -->
		
	</bean>

  
  <!--SessionFactory Description --> 
  <!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean"   autowire="autodetect"> -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
     <property name="dataSource" ref="dataSource" />
     <property name="packagesToScan">
        <list>
          <value>com.icitic.avp.bean.hbm.pojo</value>        
        </list>
     </property>
     <property name="hibernateProperties">
         <props>
            <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
            <prop key="hibernate.show_sql">true</prop>
            <prop key="hibernate.format_sql">true</prop>
         </props>
     </property>
  </bean>
  
  <!--HinerbateTemplate Description -->
  <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>
  
  <!--Transaction Description -->
  <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
     <property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  
  
  <!--Transaction Advice Desctiption -->
  <!-- 
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
         <tx:method name="is*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
             <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>            
            <tx:method name="upda*"/>
        </tx:attributes>
     </tx:advice>
  
  <aop:config>
    <aop:pointcut    id="transactionPointcut" expression="execution(public * com.icitic.avp.services.*.*(..))" />
    <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
  </aop:config>
  -->  
  
  
  
  <!-- 应用 Bean 配置 - Biz bean or DAO bean-->
  <bean id="beanDaoImpl" class="com.icitic.avp.bean.hbm.pojo.dao.IcSysParaDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"></property>
  </bean>
  <bean id="beanDaoHibernateTmplateImpl" class="com.icitic.avp.bean.hbm.pojo.dao.IcSysParaDaoHibernateTmplateImpl">
    <property name="hibernateTemplate" ref="hibernateTemplate"></property>
  </bean>
  
  <bean id="beanDaoHibernateDaoSupportImpl" class="com.icitic.avp.bean.hbm.pojo.dao.IcSysParaDaoHibernateDaoSupportImpl">
   	<property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  <bean id="genericBaseHibernateDAO" class="com.kigo.tmplate.frm.hbm.dao.impl.GenericBaseHibernateDAO">
   	<property name="sessionFactory" ref="sessionFactory" />
  </bean>
  
  
  
</beans>